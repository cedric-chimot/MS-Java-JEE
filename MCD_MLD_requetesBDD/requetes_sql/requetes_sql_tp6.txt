TP6

Exercices (ville_fr) : 

question 1 :

SELECT ville_nom AS nomVille, ville_population_2012 AS population2012
FROM villes_france_free
ORDER BY ville_population_2012 DESC
LIMIT 10;
            -------------------

question 2 :

SELECT ville_nom AS nomVille, ville_surface AS superficie
FROM villes_france_free
ORDER BY ville_surface ASC
LIMIT 50;
            -------------------

question 3 :

SELECT * FROM villes_france_free
WHERE ville_departement LIKE '97%';
            -------------------

question 4 : 

SELECT v.ville_departement AS departement, v.ville_population_2012 AS popu2012, d.departement_nom AS nomDepart
FROM villes_france_free v
INNER JOIN departement d ON v.ville_departement = d.departement_code
ORDER BY popu2012 DESC
LIMIT 10;
            -------------------

question 5 :

SELECT d.departement_nom AS nom_departement, d.departement_code AS code_departement, COUNT(v.ville_id) AS nombre_de_communes
FROM departement d
LEFT JOIN villes_france_free v ON d.departement_code = v.ville_departement
GROUP BY d.departement_nom, d.departement_code
ORDER BY nombre_de_communes DESC;
            -------------------

question 6 : 

SELECT d.departement_nom AS nomDepart, d.departement_code AS codeDepart, COUNT(v.ville_surface) AS superficie
FROM departement d
INNER JOIN villes_france_free v ON d.departement_code = v.ville_departement
GROUP by codeDepart, nomDepart
ORDER BY superficie DESC
LIMIT 10;
            -------------------

question 7 :

SELECT COUNT(*) AS nbVilles FROM villes_france_free
WHERE ville_nom LIKE 'SAINT%';
            -------------------

question 8 :

SELECT v.ville_nom, COUNT(ville_nom) AS nbVilles 
FROM villes_france_free v 
GROUP BY ville_nom
HAVING COUNT(ville_nom) > 1
ORDER BY nbVilles DESC;
            -------------------

question 9 :

SELECT ville_nom, ville_surface
FROM villes_france_free 
WHERE ville_surface > (
    SELECT AVG(ville_surface)
    FROM villes_france_free
);
            -------------------

question 10 :

SELECT d.departement_nom AS nomDepart, d.departement_code AS codeDepart
FROM departement d
WHERE EXISTS (
    SELECT 1
    FROM villes_france_free v
    WHERE v.ville_departement = d.departement_code
    GROUP BY v.ville_departement
    HAVING SUM(v.ville_population_2012) > 2000000
);
            -------------------

question 11 :

UPDATE `villes_france_free`
SET ville_nom = REPLACE (ville_nom, '-','')
WHERE ville_nom LIKE 'SAINT-%';


----------------------------------------------------------------------------------------
Exercice 2 :

question 1 :

SELECT * FROM client
WHERE prenom = 'Muriel'
AND password = SHA1('test11');
            -------------------

question 2 :

SELECT cl.nom, COUNT(*) AS nbCommandes
FROM commande_ligne cl
GROUP BY cl.nom
HAVING COUNT(*) > 1;
            -------------------

question 3 :

SELECT cl.nom AS produit, COUNT(cl.commande_id) AS nbCommandes, GROUP_CONCAT(cl.commande_id) comAssoc
FROM commande_ligne cl
GROUP BY cl.nom
HAVING COUNT(cl.commande_id) > 1;
            -------------------

question 4 :

UPDATE commande_ligne
SET prix_total = quantite * prix_unitaire;
            -------------------

question 5 :

SELECT c.id AS idCommande, c.date_achat AS dateCommande, cl.prenom AS prenomClient, cl.nom AS nomClient, SUM(cln.prix_total) AS montantTotal
FROM commande c 
JOIN client cl ON c.client_id = cl.id
JOIN commande_ligne cln on c.id = cln.commande_id
GROUP BY c.id, c.date_achat, cl.prenom, cl.nom
ORDER BY c.id;
            -------------------

question 6 :

UPDATE commande AS c 
JOIN (
    SELECT commande_id, SUM(prix_total) AS montantTotal
    FROM commande_ligne
    GROUP BY commande_id
) AS subRequete ON c.id = subRequete.commande_id
SET c.cache_prix_total = subRequete.montantTotal;
            -------------------

question 7 :

SELECT DATE_FORMAT(date_achat, '%Y-%m') AS mois, SUM(cache_prix_total) AS montantTotal
FROM commande
GROUP BY mois
ORDER BY mois;
            -------------------

question 8 :

SELECT cl.id AS idClient, cl.prenom AS prenomClient, cl.nom AS nomClient, SUM(c.cache_prix_total) AS montantTotal
FROM client cl 
JOIN commande c ON cl.id = c.client_id
GROUP BY idClient, prenomClient, nomClient
ORDER BY montantTotal DESC
LIMIT 10;
            -------------------

question 9 :

SELECT DATE(date_achat) AS dateCommande, SUM(cache_prix_total) AS montantTotal
FROM commande 
GROUP BY dateCommande
ORDER BY dateCommande;
            -------------------

question 10 : 

ALTER TABLE commande
ADD COLUMN category INT;
            -------------------

question 11, 12, 13 :

CREATE TABLE commande_category (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_value INT,
    description VARCHAR(255)
);

INSERT INTO commande_category (category_value, description) VALUES
    (1, 'Moins de 200€'),
    (2, 'Entre 200€ et 500€'),
    (3, 'Entre 500€ et 1.000€'),
    (4, 'Supérieur à 1.000€');


UPDATE commande
SET category = 1
WHERE cache_prix_total < 200;


UPDATE commande
SET category = 2
WHERE cache_prix_total >= 200 AND cache_prix_total <= 500;


UPDATE commande
SET category = 3
WHERE cache_prix_total > 500 AND cache_prix_total <= 1000;


UPDATE commande
SET category = 4
WHERE cache_prix_total > 1000;
            -------------------

question 14 :

SELECT c.id AS commande_id
FROM commande c
WHERE c.date < '2019-02-01';

DELETE FROM commande_ligne
WHERE commande_id IN (
    SELECT c.id
    FROM commande c
    WHERE c.date_achat < '2019-02-01'
);

DELETE FROM commande
WHERE date_achat < '2019-02-01';



